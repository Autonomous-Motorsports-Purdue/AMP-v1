<?xml version="1.0"?>

<launch>
  <!-- TF SETUP -->
  <!-- Set params related to the tf frames used in packages below -->
  <param name="pub_map_odom_transform" value="true"/> 
  <param name="map_frame" value="map"/>
  <param name="base_frame" value="base_link"/>
  <param name="odom_frame" value="base_link"/>

  <!-- Include the launch file that configures all static transforms for the kart -->
  <include file="$(find static_tf_config)/launch/static_transforms_config.launch" />

  <!-- DRIVER INITIALIZATION (VELODYNE) -->
  <!-- In this section the Velodyne Sensor will be initialized. Call the launch 
       file for our LiDAR (VLP-16) to start outputting the LiDAR 3D pointcloud
       the data on the associated topics (we care about /velodyne_points) -->
  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />

  
  <!-- LASERSCAN SLICING -->
  <!-- This node is responsible for taking the 3D point cloud published by 
	     Velodyne (/velodyne_points)  and publishing messages to a new topic 
			 (/top/scan) that contain one 2D slice of the 3D pointcloud. --> 
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" 
				name="pointcloud_to_laserscan">
      <!-- TODO(zghera): Edit this param file so that we use the 2D scan at a
			                   pitch of 0 degrees. -->
      <rosparam file="$(find kart_2dnav)/params/pointcloud_to_laserscan_params.yaml" 
								command="load" />
			<!-- Subscribe to topic /velodyne_points for pointcloud input. -->
      <remap from="cloud_in" to="/velodyne_points" />
			<!-- Publish to topic top/scan rather than default /scan so that we can 
					 distinguish from the 2D laserscan published by this node vs the default 
					 scan topic published by the velodyne topics. Always use top/scan because
					 we can modify the parameters to create the 2D scan where the Velodyne 
					 default /scan is fixed. -->
      <remap from="scan" to="top/scan" />
  </node>


  <!-- LASER ODOMETRY -->
  <!-- This node is responsible for taking incremental 2D laserscans (/top/scan)
	     and outputting estimated odometry information as a tf (odom->base_link) 
			 and by publishing messages to the est_odom_out_pose topic. -->
  <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" 
	      name="laser_scan_matcher_node" output="screen">
      <remap from="scan" to="top/scan" />
      <rosparam file="$(find kart_2dnav)/params/laser_scan_matcher_params.yaml" 
			          command="load" />
  </node>


  <!-- SLAM: LOCALIZATION & MAPPING -->
  <!-- Run the SLAM package, HectorMapping, that takes in 2D laser scans 
	     (/top/scan) and publishes topics for the created map (/map) and 
			 estimated pose (/slam_out_pose) of the kart relative to the map. 
			 This node is also responsible for publishing the tf map->odom. --> 
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
      <rosparam file="$(find kart_2dnav)/params/hector_mapping_params.yaml" command="load" /> :q
  </node>

  <!-- ROS NAVIGATION STACK -->
  <!-- Configure and run move_base to set up the ROS Navigation Stack. -->
  <!-- More details on inputs/outputs can be found in move_base.launch -->
  <include file="$(find kart_2dnav)/launch/kart/move_base.launch" />

  <!-- GOAL SETTING -->
  <!-- Run the goal setting algorithm to navigate without a preliminary map (lap 1).
	     This node takes 2D laser scans (/top/scan) then constructs a goal message and 
			 creates an ActionClient to sends the goal as ROS actions to SimpleActionServer 
			 on move_base.
			 Note: /move_base_simple/goal is a non-action topic that move_base subsribes 
			 to in case users don't want to use the ActionServer but all of our goals 
			 go through the action server. When looking at an rqt_graph or visualizing 
			 the connections of nodes, you can think of slam_mode_goal publishing to 
			 /move_base_simple/goal which move_base subscribes to. But know that in 
			 actuality, slam_mode_goal node is sending ROS Actions to the move_base 
			 ActionAPI to send move_base new goals to pursue (move_base will get these 
			 from move_base/goal Action Topic). 
			 For more info see http://wiki.ros.org/move_base#Action_API. -->
  <!-- TODO(?): figure out how to incorporate ROS params with goal setting script -->
  <node pkg="slam_mode_goal" type="slam_mode_goal" name="slam_mode_goal" output="screen">
  </node>

  <!-- MICROCONTROLLER COMM -->
  <!-- Run the communication script to enable and start communicating with the 
	     microcontroller. This node subscribed to the /cmd_vel topic published by 
			 move_base and then then sends packets containing the velocity and steering 
			 angle to the MCU over a serial connection. -->
  <node pkg="ti_comm" type="ti_comm_node" name="ti_comm_node" output="screen" />

  <!-- Launch rviz with the configuration file in order to visualize incoming data -->
  <!-- NOTE: Remove for when actually embedded into the Jetson -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find kart_2dnav)/params/kart_rviz.rviz" />
</launch>
